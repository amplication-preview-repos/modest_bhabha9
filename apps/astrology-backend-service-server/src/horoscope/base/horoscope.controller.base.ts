/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { HoroscopeService } from "../horoscope.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { HoroscopeCreateInput } from "./HoroscopeCreateInput";
import { Horoscope } from "./Horoscope";
import { HoroscopeFindManyArgs } from "./HoroscopeFindManyArgs";
import { HoroscopeWhereUniqueInput } from "./HoroscopeWhereUniqueInput";
import { HoroscopeUpdateInput } from "./HoroscopeUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class HoroscopeControllerBase {
  constructor(
    protected readonly service: HoroscopeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Horoscope })
  @nestAccessControl.UseRoles({
    resource: "Horoscope",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createHoroscope(
    @common.Body() data: HoroscopeCreateInput
  ): Promise<Horoscope> {
    return await this.service.createHoroscope({
      data: data,
      select: {
        createdAt: true,
        dailyPrediction: true,
        id: true,
        monthlyPrediction: true,
        sign: true,
        updatedAt: true,
        weeklyPrediction: true,
        yearlyPrediction: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Horoscope] })
  @ApiNestedQuery(HoroscopeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Horoscope",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async horoscopes(@common.Req() request: Request): Promise<Horoscope[]> {
    const args = plainToClass(HoroscopeFindManyArgs, request.query);
    return this.service.horoscopes({
      ...args,
      select: {
        createdAt: true,
        dailyPrediction: true,
        id: true,
        monthlyPrediction: true,
        sign: true,
        updatedAt: true,
        weeklyPrediction: true,
        yearlyPrediction: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Horoscope })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Horoscope",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async horoscope(
    @common.Param() params: HoroscopeWhereUniqueInput
  ): Promise<Horoscope | null> {
    const result = await this.service.horoscope({
      where: params,
      select: {
        createdAt: true,
        dailyPrediction: true,
        id: true,
        monthlyPrediction: true,
        sign: true,
        updatedAt: true,
        weeklyPrediction: true,
        yearlyPrediction: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Horoscope })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Horoscope",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateHoroscope(
    @common.Param() params: HoroscopeWhereUniqueInput,
    @common.Body() data: HoroscopeUpdateInput
  ): Promise<Horoscope | null> {
    try {
      return await this.service.updateHoroscope({
        where: params,
        data: data,
        select: {
          createdAt: true,
          dailyPrediction: true,
          id: true,
          monthlyPrediction: true,
          sign: true,
          updatedAt: true,
          weeklyPrediction: true,
          yearlyPrediction: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Horoscope })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Horoscope",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteHoroscope(
    @common.Param() params: HoroscopeWhereUniqueInput
  ): Promise<Horoscope | null> {
    try {
      return await this.service.deleteHoroscope({
        where: params,
        select: {
          createdAt: true,
          dailyPrediction: true,
          id: true,
          monthlyPrediction: true,
          sign: true,
          updatedAt: true,
          weeklyPrediction: true,
          yearlyPrediction: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
