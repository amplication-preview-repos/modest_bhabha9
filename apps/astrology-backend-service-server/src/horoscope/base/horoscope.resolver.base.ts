/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Horoscope } from "./Horoscope";
import { HoroscopeCountArgs } from "./HoroscopeCountArgs";
import { HoroscopeFindManyArgs } from "./HoroscopeFindManyArgs";
import { HoroscopeFindUniqueArgs } from "./HoroscopeFindUniqueArgs";
import { CreateHoroscopeArgs } from "./CreateHoroscopeArgs";
import { UpdateHoroscopeArgs } from "./UpdateHoroscopeArgs";
import { DeleteHoroscopeArgs } from "./DeleteHoroscopeArgs";
import { HoroscopeService } from "../horoscope.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Horoscope)
export class HoroscopeResolverBase {
  constructor(
    protected readonly service: HoroscopeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Horoscope",
    action: "read",
    possession: "any",
  })
  async _horoscopesMeta(
    @graphql.Args() args: HoroscopeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Horoscope])
  @nestAccessControl.UseRoles({
    resource: "Horoscope",
    action: "read",
    possession: "any",
  })
  async horoscopes(
    @graphql.Args() args: HoroscopeFindManyArgs
  ): Promise<Horoscope[]> {
    return this.service.horoscopes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Horoscope, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Horoscope",
    action: "read",
    possession: "own",
  })
  async horoscope(
    @graphql.Args() args: HoroscopeFindUniqueArgs
  ): Promise<Horoscope | null> {
    const result = await this.service.horoscope(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Horoscope)
  @nestAccessControl.UseRoles({
    resource: "Horoscope",
    action: "create",
    possession: "any",
  })
  async createHoroscope(
    @graphql.Args() args: CreateHoroscopeArgs
  ): Promise<Horoscope> {
    return await this.service.createHoroscope({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Horoscope)
  @nestAccessControl.UseRoles({
    resource: "Horoscope",
    action: "update",
    possession: "any",
  })
  async updateHoroscope(
    @graphql.Args() args: UpdateHoroscopeArgs
  ): Promise<Horoscope | null> {
    try {
      return await this.service.updateHoroscope({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Horoscope)
  @nestAccessControl.UseRoles({
    resource: "Horoscope",
    action: "delete",
    possession: "any",
  })
  async deleteHoroscope(
    @graphql.Args() args: DeleteHoroscopeArgs
  ): Promise<Horoscope | null> {
    try {
      return await this.service.deleteHoroscope(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
