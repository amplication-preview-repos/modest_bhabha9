/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Compatibility as PrismaCompatibility } from "@prisma/client";

export class CompatibilityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CompatibilityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.compatibility.count(args);
  }

  async compatibilities<T extends Prisma.CompatibilityFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompatibilityFindManyArgs>
  ): Promise<PrismaCompatibility[]> {
    return this.prisma.compatibility.findMany<Prisma.CompatibilityFindManyArgs>(
      args
    );
  }
  async compatibility<T extends Prisma.CompatibilityFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompatibilityFindUniqueArgs>
  ): Promise<PrismaCompatibility | null> {
    return this.prisma.compatibility.findUnique(args);
  }
  async createCompatibility<T extends Prisma.CompatibilityCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompatibilityCreateArgs>
  ): Promise<PrismaCompatibility> {
    return this.prisma.compatibility.create<T>(args);
  }
  async updateCompatibility<T extends Prisma.CompatibilityUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompatibilityUpdateArgs>
  ): Promise<PrismaCompatibility> {
    return this.prisma.compatibility.update<T>(args);
  }
  async deleteCompatibility<T extends Prisma.CompatibilityDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompatibilityDeleteArgs>
  ): Promise<PrismaCompatibility> {
    return this.prisma.compatibility.delete(args);
  }
}
