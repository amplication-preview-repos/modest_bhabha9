/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Compatibility } from "./Compatibility";
import { CompatibilityCountArgs } from "./CompatibilityCountArgs";
import { CompatibilityFindManyArgs } from "./CompatibilityFindManyArgs";
import { CompatibilityFindUniqueArgs } from "./CompatibilityFindUniqueArgs";
import { CreateCompatibilityArgs } from "./CreateCompatibilityArgs";
import { UpdateCompatibilityArgs } from "./UpdateCompatibilityArgs";
import { DeleteCompatibilityArgs } from "./DeleteCompatibilityArgs";
import { CompatibilityService } from "../compatibility.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Compatibility)
export class CompatibilityResolverBase {
  constructor(
    protected readonly service: CompatibilityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Compatibility",
    action: "read",
    possession: "any",
  })
  async _compatibilitiesMeta(
    @graphql.Args() args: CompatibilityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Compatibility])
  @nestAccessControl.UseRoles({
    resource: "Compatibility",
    action: "read",
    possession: "any",
  })
  async compatibilities(
    @graphql.Args() args: CompatibilityFindManyArgs
  ): Promise<Compatibility[]> {
    return this.service.compatibilities(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Compatibility, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Compatibility",
    action: "read",
    possession: "own",
  })
  async compatibility(
    @graphql.Args() args: CompatibilityFindUniqueArgs
  ): Promise<Compatibility | null> {
    const result = await this.service.compatibility(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Compatibility)
  @nestAccessControl.UseRoles({
    resource: "Compatibility",
    action: "create",
    possession: "any",
  })
  async createCompatibility(
    @graphql.Args() args: CreateCompatibilityArgs
  ): Promise<Compatibility> {
    return await this.service.createCompatibility({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Compatibility)
  @nestAccessControl.UseRoles({
    resource: "Compatibility",
    action: "update",
    possession: "any",
  })
  async updateCompatibility(
    @graphql.Args() args: UpdateCompatibilityArgs
  ): Promise<Compatibility | null> {
    try {
      return await this.service.updateCompatibility({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Compatibility)
  @nestAccessControl.UseRoles({
    resource: "Compatibility",
    action: "delete",
    possession: "any",
  })
  async deleteCompatibility(
    @graphql.Args() args: DeleteCompatibilityArgs
  ): Promise<Compatibility | null> {
    try {
      return await this.service.deleteCompatibility(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
